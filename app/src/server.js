require('@tensorflow/tfjs')

const express = require('express')
/*
const { graphqlHTTP } = require('express-graphql')
const { buildSchema } = require('graphql')
*/
const { Pool } = require('pg')
const faceapi = require('face-api.js')
const app = express()
const pool = new Pool({
  user: process.env.PGUSER,
  host: process.env.PGHOST,
  database: process.env.PGDATABASE,
  password: process.env.PGPASSWORD,
  port: process.env.PGPORT,
  ssl: process.env.PGSSL
})
const multer  = require('multer')
/*
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const path = require('path')
    cb(null, path.join('uploads/'))
  },
  filename: function (req, file, cb) {
    cb(null, Math.round(Math.random() * 1E9) + '-' + file.originalname)
  }
})
*/
const upload = multer({storage: multer.memoryStorage()})
const canvas = require('canvas')

// Setup logging
const loggerOptions = {
  level: process.env.LOGLEVEL,
  transport: {
    target: 'pino-pretty',
    options: {
      colorize: true
    }
  },
};
const pinoHttp = require('pino-http')(loggerOptions)
const logger = require('pino')(loggerOptions)
app.use(pinoHttp)

//Set up canvas anda face-api
const { Canvas, Image, ImageData, loadImage } = canvas
faceapi.env.monkeyPatch({ Canvas, Image, ImageData })

/*
var schema = buildSchema(`
  type Mutation {
    register(userPhoto: String!, nameSurname: String!): String
  }
  type Query {
    hello: String
  }
`)
*/

async function loadUserPhoto(userPhoto) {
  try {
    const img = await loadImage(userPhoto);
    /*
    const img = new Image();
    img.src = fs.readFileSync(path.join('uploads', userPhoto));
    img.src = userPhoto;
    */
    return img;
  } catch (e) {
    throw Error('Error loading image');
  }
}

async function detectFace(img) {
  const detections = await faceapi
    .detectSingleFace(img)
    .withFaceLandmarks()
    .withFaceDescriptor();
  const descriptors = detections
    ? Object.values(detections.descriptor)
    : [];
  return descriptors;
}

/*
var rootValue = {
  register: async ({ userPhoto, nameSurname }) => {
    console.log("start processing");
    const descriptors = await detectFace(await loadUserPhoto(userPhoto));
    return pool
      .query(
        'INSERT INTO "users" ("name_surname", "biometrics") VALUES ($1, $2) RETURNING *',
        [nameSurname, JSON.stringify(descriptors)]
      )
      .then((res) => res.rows[0].name_surname)
      .catch((e) => console.error(e));
  },
  hello: () => {
    const labeledDescriptors = [
      new faceapi.LabeledFaceDescriptors(
       'mahir',
        [
         new Float32Array([-0.0985526517033577,-0.005211722105741501,0.008485527709126472,-0.02566632069647312,-0.015814514830708504,-0.08708591014146805,-0.025250963866710663,-0.1002141460776329,0.14502157270908356,-0.06078116595745087,0.2558867037296295,-0.006846045609563589,-0.28560617566108704,-0.08070051670074463,-0.01828395016491413,0.12196952849626541,-0.151530459523201,-0.025891002267599106,-0.1542980670928955,-0.14006692171096802,-0.07695947587490082,-0.04337342828512192,0.0746949091553688,-0.0024446421302855015,-0.10398499667644501,-0.32148706912994385,-0.06003342941403389,-0.07397542148828506,0.024286432191729546,-0.11406510323286057,0.0777973160147667,0.0970822423696518,-0.1814025342464447,-0.059842951595783234,0.06296796351671219,0.10067953169345856,-0.042240120470523834,0.0034243676345795393,0.28520527482032776,0.053695306181907654,-0.09266160428524017,0.09636931866407394,-0.003054982516914606,0.26671531796455383,0.2478763312101364,0.05461248382925987,-0.06354665756225586,-0.08261806517839432,0.1497444361448288,-0.2668182849884033,-0.024705179035663605,0.18090245127677917,0.08850376307964325,0.013153813779354095,0.11513291299343109,-0.09890183061361313,0.07217704504728317,0.06554734706878662,-0.24115139245986938,-0.015497279353439808,0.03756660968065262,-0.12147094309329987,-0.04542910307645798,-0.011344569735229015,0.17975735664367676,0.11408638209104538,-0.12754490971565247,-0.05608457326889038,0.159730464220047,-0.1341671496629715,0.028176577761769295,0.014044581912457943,-0.10226912796497345,-0.16060127317905426,-0.2934110760688782,0.046995144337415695,0.3380644917488098,0.1398959904909134,-0.17173270881175995,0.04683893918991089,-0.0712319165468216,-0.030701231211423874,0.05546265468001366,-0.003452520351856947,-0.1355953961610794,-0.10731413960456848,-0.027238350361585617,0.014894463121891022,0.09594570100307465,0.03791582211852074,-0.05130811780691147,0.17652736604213715,-0.05209118500351906,0.05753850191831589,0.0546109713613987,-0.03627745807170868,-0.16860352456569672,-0.08215226978063583,-0.15338198840618134,-0.05154029652476311,0.05366877093911171,-0.1082531288266182,0.12731003761291504,0.07204683870077133,-0.17301476001739502,0.1232057437300682,-0.04134136438369751,-0.0478031150996685,0.039544012397527695,0.06221869960427284,-0.08550344407558441,0.025460869073867798,0.13273204863071442,-0.28522342443466187,0.33737912774086,0.16968503594398499,-0.024148982018232346,0.09255018085241318,0.10826348513364792,0.024685265496373177,-0.07677570730447769,0.0976758673787117,-0.05855317786335945,-0.11638155579566956,-0.05271606519818306,0.011011943221092224,0.13398659229278564,-0.0239979587495327])
        ]
      ),
      new faceapi.LabeledFaceDescriptors(
        'gokcen',
        [
          new Float32Array([-0.02301131933927536,0.08269809931516647,-0.00718272477388382,-0.08502250164747238,-0.05094054341316223,-0.010587397031486034,0.01960977166891098,-0.05820094421505928,0.1935538798570633,-0.07928553223609924,0.11986546963453293,-0.01168015506118536,-0.27629315853118896,0.003553175600245595,-0.10240767151117325,0.01916784979403019,-0.14499863982200623,-0.14008331298828125,-0.15367479622364044,-0.13112451136112213,0.03516647592186928,0.018908865749835968,-0.04923586547374725,-0.05082671716809273,-0.15994958579540253,-0.20218628644943237,-0.04903155565261841,-0.10954023897647858,0.03507845476269722,-0.11628497391939163,0.1323033571243286,-0.018902568146586418,-0.187651127576828,-0.0675126239657402,-0.02534659579396248,0.009943932294845581,-0.07023858278989792,-0.013889297842979431,0.20792093873023987,0.010283171199262142,-0.1528296321630478,0.08118022233247757,0.03679455444216728,0.3206046223640442,0.11684560775756836,0.07297615706920624,-0.022479074075818062,-0.0813668742775917,0.15274009108543396,-0.3024730682373047,0.12236173450946808,0.23910439014434814,0.09195329248905182,0.07412262260913849,0.12147317826747894,-0.14940375089645386,0.052286311984062195,0.15597131848335266,-0.1846362054347992,0.11461465060710907,0.15180604159832,0.06057086959481239,-0.04395245015621185,-0.045593924820423126,0.11502483487129211,0.028865870088338852,-0.14036889374256134,-0.0749637559056282,0.10731644183397293,-0.16294343769550323,0.013473358936607838,0.0703004002571106,-0.09638123214244843,-0.18814890086650848,-0.20693184435367584,0.1347462385892868,0.4249444305896759,0.16670365631580353,-0.05198163911700249,0.017231393605470657,-0.09226065129041672,0.013943159952759743,0.06889817863702774,-0.025541532784700394,-0.13051795959472656,-0.05142911896109581,-0.040857672691345215,0.07892269641160965,0.10915298759937286,0.004470336250960827,-0.033810026943683624,0.16523733735084534,0.0074128094129264355,-0.07929662615060806,-0.046147432178258896,0.0329936183989048,-0.1834385246038437,0.013067545369267464,-0.07914514094591141,0.03937247022986412,0.10146673768758774,-0.09336331486701965,0.022364571690559387,0.1087927296757698,-0.1359163075685501,0.17305569350719452,-0.018959378823637962,-0.028985610231757164,0.013381286524236202,0.037018828094005585,-0.07515882700681686,-0.03691759333014488,0.1654938906431198,-0.21919457614421844,0.20277898013591766,0.1474672108888626,-0.005680189933627844,0.08271370083093643,0.0848422721028328,0.04587354138493538,0.013706323690712452,0.055280085653066635,-0.18137481808662415,-0.11816900968551636,-0.025711214169859886,0.0018720213556662202,0.02139936201274395,-0.008969360962510109]),
          new Float32Array([-0.036585018038749695,0.053929150104522705,-0.061404258012771606,-0.1173396110534668,-0.03179597854614258,0.018178705126047134,0.0148862199857831,-0.042689766734838486,0.20386576652526855,-0.10101987421512604,0.10659103095531464,-0.013588360510766506,-0.27458178997039795,-0.013685285113751888,-0.08436938375234604,0.01640840619802475,-0.1716911345720291,-0.10830707848072052,-0.16150718927383423,-0.13931745290756226,0.08188086003065109,0.004945423454046249,-0.010322335176169872,0.005870855413377285,-0.19103966653347015,-0.24103596806526184,-0.05612804740667343,-0.1372474879026413,0.01644676923751831,-0.1404445767402649,0.11642160266637802,-0.028200017288327217,-0.1616947054862976,-0.04448642209172249,-0.07371332496404648,-0.020720969885587692,-0.01162127498537302,-0.025645626708865166,0.18232232332229614,-0.00862501934170723,-0.16285409033298492,0.03288727626204491,-0.03092070110142231,0.2970564067363739,0.12493057548999786,0.06565260887145996,0.005683638155460358,-0.07817267626523972,0.13634470105171204,-0.2895965874195099,0.1118972897529602,0.18232518434524536,0.03656570613384247,0.020033545792102814,0.10991697013378143,-0.13843680918216705,-0.0015877006808295846,0.14856140315532684,-0.1544879823923111,0.08526381105184555,0.07124219089746475,0.048659685999155045,-0.019735027104616165,-0.0688532218337059,0.13659197092056274,0.06518285721540451,-0.14191782474517822,-0.07880396395921707,0.12588118016719818,-0.15901079773902893,0.017851976677775383,0.035197194665670395,-0.08561698347330093,-0.19305944442749023,-0.21615737676620483,0.10235375910997391,0.43272194266319275,0.16396966576576233,-0.09231487661600113,0.020545359700918198,-0.15101999044418335,0.019045459106564522,0.10322770476341248,-0.017949514091014862,-0.13281455636024475,-0.0038057437632232904,-0.04788421466946602,0.0931389257311821,0.12506186962127686,-0.017915155738592148,-0.07281805574893951,0.17036142945289612,-0.010797032155096531,-0.06846517324447632,0.0073851034976542,0.049554575234651566,-0.20174260437488556,0.04261067137122154,-0.07192639261484146,0.054821308702230453,0.14311714470386505,-0.08976449817419052,0.03174068406224251,0.10724776238203049,-0.1152421161532402,0.18028044700622559,-0.017812605947256088,-0.041741181164979935,0.02536473236978054,0.05549915134906769,-0.1196960061788559,-0.06029077246785164,0.18521665036678314,-0.2134459763765335,0.15831680595874786,0.1525304764509201,0.005179832223802805,0.14882077276706696,0.08473406732082367,0.07638684660196304,-0.0012873158557340503,0.06564563512802124,-0.18658971786499023,-0.07480314373970032,0.03648918867111206,0.03392630070447922,0.0504831038415432,-0.013098524883389473]),
        ]
      )
    ]
    const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors)
    return faceMatcher.findBestMatch(new Float32Array([0.007695954293012619,0.08058016002178192,-0.028033196926116943,-0.10997937619686127,-0.022148940712213516,0.012495770119130611,0.009317607618868351,-0.05409177020192146,0.1314014494419098,-0.10538782924413681,0.14579862356185913,-0.0816577598452568,-0.2730899751186371,-0.04834838956594467,-0.10349394381046295,0.06189477816224098,-0.16128228604793549,-0.11174886673688889,-0.17082864046096802,-0.09563444554805756,0.09163798391819,-0.013010993599891663,-0.05458316206932068,-0.00116257113404572,-0.13129794597625732,-0.2808135449886322,-0.04101771116256714,-0.11028216779232025,0.020751457661390305,-0.12139523029327393,0.06119723990559578,-0.037702105939388275,-0.17849647998809814,-0.030871421098709106,-0.045529257506132126,-0.028033187612891197,-0.03126533702015877,-0.051732953637838364,0.1339152604341507,0.014120220206677914,-0.1444476991891861,0.1322186142206192,0.00965417455881834,0.27579179406166077,0.13520534336566925,0.07925756275653839,0.013420169241726398,-0.0754995197057724,0.12496386468410492,-0.29869046807289124,0.033729247748851776,0.15828756988048553,0.059843793511390686,0.041787099093198776,0.0932750329375267,-0.15173882246017456,-0.012810510583221912,0.08133165538311005,-0.14832216501235962,0.07377909868955612,0.045668743550777435,0.05645575374364853,-0.04878029227256775,-0.06963988393545151,0.11879027634859085,0.06783555448055267,-0.14805206656455994,-0.08948291838169098,0.11108529567718506,-0.16919447481632233,0.03179197013378143,0.023486202582716942,-0.07390052080154419,-0.14748701453208923,-0.1793348491191864,0.09063102304935455,0.4685674011707306,0.16708096861839294,-0.11104325950145721,-0.007134644314646721,-0.16831515729427338,0.04182063788175583,0.09122446179389954,-0.059888362884521484,-0.1093202754855156,-0.025020482018589973,-0.06570282578468323,0.08996252715587616,0.1401301622390747,-0.049386754631996155,-0.04925850033760071,0.1719771921634674,-0.00461482722312212,-0.02430466003715992,-0.03438804671168327,0.0030238705221563578,-0.19133922457695007,0.034221358597278595,-0.07505643367767334,0.02526114508509636,0.0818486362695694,-0.0917142927646637,0.028499873355031013,0.09415079653263092,-0.1315436214208603,0.15392006933689117,0.0017219536239281297,-0.03309585154056549,0.0381905734539032,0.11647925525903702,-0.11661025136709213,-0.03146069869399071,0.1252155303955078,-0.22084644436836243,0.16898909211158752,0.18798941373825073,0.05291173234581947,0.08979905396699905,0.10699894279241562,0.02438473515212536,0.013721712864935398,0.03630319610238075,-0.16704267263412476,-0.12098485976457596,0.0005756213795393705,0.058832455426454544,0.022049814462661743,-0.04300837963819504]))
  },
}
app.use('/graphql', 
  graphqlHTTP({
    schema,
    rootValue,
    graphiql: process.env.ENABLE_GRAPHIQL ? process.env.ENABLE_GRAPHIQL : false
}));
*/

app.post('/register', upload.single('user_photo'), async function (req, res, next) {
  const descriptors = await detectFace(await loadUserPhoto(req.file.buffer));
  const result = await pool
    .query(
      'INSERT INTO "users" ("name_surname", "biometrics") VALUES ($1, $2) RETURNING *',
      [req.body.name_surname, JSON.stringify(descriptors)]
      )
    .then((res) => res.rows[0].name_surname)
    .catch((e) => req.log.error(e));
  res.json(result);
})

app.post('/signin', upload.single('user_photo'), async function (req, res, next) {
  const descriptors = await detectFace(await loadUserPhoto(req.file.buffer));
  const result = await pool
    .query(
      'SELECT name_surname, l2_distance(biometrics::text::vector, $1) as distance from public.users ORDER BY distance ASC LIMIT 1',
      [JSON.stringify(descriptors)]
    )
    .then((res) => {
      req.log.debug(res.rows[0])
      return res.rows[0]
  })
  .catch((e) => req.log.error(e));
  res.json(result);
})

;(async () => { // for ; at the beginning see: https://github.com/expressjs/express/issues/3515#issuecomment-353738007
  const initModels = async () => {
    try {
      const ssdMobilenetv1Method = faceapi.nets.ssdMobilenetv1.loadFromDisk(`./weights`)
      const faceLandmark68NetMethod = faceapi.nets.faceLandmark68Net.loadFromDisk(`./weights`)
      const faceRecognitionNetMethod = faceapi.nets.faceRecognitionNet.loadFromDisk(`./weights`)
      await ssdMobilenetv1Method
      await faceLandmark68NetMethod
      await faceRecognitionNetMethod
      return true;
    }
    catch (error) {
      logger.error('Models failed to load: ' + error)
      return false
    }
  }
  if (await initModels()) {
    app.listen(4000);
    logger.info(`Running a GraphQL API server at http://localhost:4000/graphql`);
  }
})();